name: Github-Docker Hub MLOps projet - Salam & Nesrine


env:
  DOCKER_USER: ${{secrets.DOCKER_USER}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  REPO_NAME: ${{secrets.REPO_NAME}}

# Déclencheurs d'événements :
# Le pipeline est déclenché à chaque fois qu'il y a une transmission vers la branche principale.
# Il est également déclenché à chaque fois qu'il y a une demande d'extraction vers la branche principale.

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

# ce pipeline se compose de deux tâches nommées ci_pipeline

jobs:


  ci_pipeline: 
       runs-on: ubuntu-latest     # Le travail s'exécute sur le dernier système d'exploitation Ubuntu
       
       steps:
        - uses: actions/checkout@v1 
          with:
            fetch-depth: 0
#La première étape utilise l'action actions/checkout@v1 pour cloner le référentiel.
#Le paramètre fetch-depth: 0 garantit que l'historique complet des commits est récupéré.
        - name: Set up Python 3.12
          uses: actions/setup-python@v1
          with:
            python-version: 3.12
#La deuxième étape configure Python 3.12 en utilisant l'action actions/setup-python@v1.
#Le paramètre python-version: 3.12 spécifie la version Python souhaitée.
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
# La troisième étape installe les dépendances du projet.

        - name: Format
          run: |
            black app.py
# La quatrième étape formate le fichier app.py à l'aide du formateur de code noir.

        - name: Lint
          run: |
            pylint --disable=R,C  app.py
#La cinquième étape effectue un linting sur le fichier app.py à l'aide de pylint.
#L'indicateur --disable=R,C désactive des vérifications pylint spécifiques.

        - name: Test
          run: |
            python -m pytest -vv test.py


  cd_pipeline:

      runs-on: ubuntu-latest 
      needs: [ci_pipeline]
 
      steps:

      - uses: actions/checkout@v2 
      - name: docker login
        run: | # se connecter au compte Docker Hub
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  
      - name: Get current date # obtenir la date de construction
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      - name: Build the Docker image # pousser l'image vers le hub Docker
        run: docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}

      - name: Docker Push
        run: docker push $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}
